/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "netplay_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace netplay { namespace thrift {


Storage::~Storage() throw() {
}


void Storage::__set_dlog_size(const int64_t val) {
  this->dlog_size = val;
}

void Storage::__set_olog_size(const int64_t val) {
  this->olog_size = val;
}

void Storage::__set_idx_sizes(const std::vector<int64_t> & val) {
  this->idx_sizes = val;
}

void Storage::__set_stream_sizes(const std::vector<int64_t> & val) {
  this->stream_sizes = val;
}

uint32_t Storage::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dlog_size);
          this->__isset.dlog_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->olog_size);
          this->__isset.olog_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->idx_sizes.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->idx_sizes.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->idx_sizes[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.idx_sizes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stream_sizes.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->stream_sizes.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI64(this->stream_sizes[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stream_sizes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Storage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Storage");

  xfer += oprot->writeFieldBegin("dlog_size", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->dlog_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("olog_size", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->olog_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idx_sizes", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->idx_sizes.size()));
    std::vector<int64_t> ::const_iterator _iter10;
    for (_iter10 = this->idx_sizes.begin(); _iter10 != this->idx_sizes.end(); ++_iter10)
    {
      xfer += oprot->writeI64((*_iter10));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stream_sizes", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->stream_sizes.size()));
    std::vector<int64_t> ::const_iterator _iter11;
    for (_iter11 = this->stream_sizes.begin(); _iter11 != this->stream_sizes.end(); ++_iter11)
    {
      xfer += oprot->writeI64((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Storage &a, Storage &b) {
  using ::std::swap;
  swap(a.dlog_size, b.dlog_size);
  swap(a.olog_size, b.olog_size);
  swap(a.idx_sizes, b.idx_sizes);
  swap(a.stream_sizes, b.stream_sizes);
  swap(a.__isset, b.__isset);
}

Storage::Storage(const Storage& other12) {
  dlog_size = other12.dlog_size;
  olog_size = other12.olog_size;
  idx_sizes = other12.idx_sizes;
  stream_sizes = other12.stream_sizes;
  __isset = other12.__isset;
}
Storage& Storage::operator=(const Storage& other13) {
  dlog_size = other13.dlog_size;
  olog_size = other13.olog_size;
  idx_sizes = other13.idx_sizes;
  stream_sizes = other13.stream_sizes;
  __isset = other13.__isset;
  return *this;
}
void Storage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Storage(";
  out << "dlog_size=" << to_string(dlog_size);
  out << ", " << "olog_size=" << to_string(olog_size);
  out << ", " << "idx_sizes=" << to_string(idx_sizes);
  out << ", " << "stream_sizes=" << to_string(stream_sizes);
  out << ")";
}


QueryException::~QueryException() throw() {
}


void QueryException::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t QueryException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryException");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryException &a, QueryException &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

QueryException::QueryException(const QueryException& other14) : TException() {
  message = other14.message;
  __isset = other14.__isset;
}
QueryException& QueryException::operator=(const QueryException& other15) {
  message = other15.message;
  __isset = other15.__isset;
  return *this;
}
void QueryException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryException(";
  out << "message=" << to_string(message);
  out << ")";
}

const char* QueryException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: QueryException";
  }
}

}} // namespace

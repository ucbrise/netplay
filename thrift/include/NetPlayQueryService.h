/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NetPlayQueryService_H
#define NetPlayQueryService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "netplay_types.h"

namespace netplay { namespace thrift {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class NetPlayQueryServiceIf {
 public:
  virtual ~NetPlayQueryServiceIf() {}
  virtual void filter(std::vector<int64_t> & _return, const std::string& query) = 0;
  virtual void get(std::string& _return, const int64_t record_id) = 0;
  virtual void extract(std::string& _return, const int64_t record_id, const int16_t off, const int16_t len) = 0;
  virtual int64_t numRecords() = 0;
  virtual void storageFootprint(Storage& _return) = 0;
};

class NetPlayQueryServiceIfFactory {
 public:
  typedef NetPlayQueryServiceIf Handler;

  virtual ~NetPlayQueryServiceIfFactory() {}

  virtual NetPlayQueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NetPlayQueryServiceIf* /* handler */) = 0;
};

class NetPlayQueryServiceIfSingletonFactory : virtual public NetPlayQueryServiceIfFactory {
 public:
  NetPlayQueryServiceIfSingletonFactory(const boost::shared_ptr<NetPlayQueryServiceIf>& iface) : iface_(iface) {}
  virtual ~NetPlayQueryServiceIfSingletonFactory() {}

  virtual NetPlayQueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NetPlayQueryServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<NetPlayQueryServiceIf> iface_;
};

class NetPlayQueryServiceNull : virtual public NetPlayQueryServiceIf {
 public:
  virtual ~NetPlayQueryServiceNull() {}
  void filter(std::vector<int64_t> & /* _return */, const std::string& /* query */) {
    return;
  }
  void get(std::string& /* _return */, const int64_t /* record_id */) {
    return;
  }
  void extract(std::string& /* _return */, const int64_t /* record_id */, const int16_t /* off */, const int16_t /* len */) {
    return;
  }
  int64_t numRecords() {
    int64_t _return = 0;
    return _return;
  }
  void storageFootprint(Storage& /* _return */) {
    return;
  }
};

typedef struct _NetPlayQueryService_filter_args__isset {
  _NetPlayQueryService_filter_args__isset() : query(false) {}
  bool query :1;
} _NetPlayQueryService_filter_args__isset;

class NetPlayQueryService_filter_args {
 public:

  NetPlayQueryService_filter_args(const NetPlayQueryService_filter_args&);
  NetPlayQueryService_filter_args& operator=(const NetPlayQueryService_filter_args&);
  NetPlayQueryService_filter_args() : query() {
  }

  virtual ~NetPlayQueryService_filter_args() throw();
  std::string query;

  _NetPlayQueryService_filter_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const NetPlayQueryService_filter_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const NetPlayQueryService_filter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetPlayQueryService_filter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NetPlayQueryService_filter_pargs {
 public:


  virtual ~NetPlayQueryService_filter_pargs() throw();
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetPlayQueryService_filter_result__isset {
  _NetPlayQueryService_filter_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _NetPlayQueryService_filter_result__isset;

class NetPlayQueryService_filter_result {
 public:

  NetPlayQueryService_filter_result(const NetPlayQueryService_filter_result&);
  NetPlayQueryService_filter_result& operator=(const NetPlayQueryService_filter_result&);
  NetPlayQueryService_filter_result() {
  }

  virtual ~NetPlayQueryService_filter_result() throw();
  std::vector<int64_t>  success;
  QueryException e;

  _NetPlayQueryService_filter_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  void __set_e(const QueryException& val);

  bool operator == (const NetPlayQueryService_filter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const NetPlayQueryService_filter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetPlayQueryService_filter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetPlayQueryService_filter_presult__isset {
  _NetPlayQueryService_filter_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _NetPlayQueryService_filter_presult__isset;

class NetPlayQueryService_filter_presult {
 public:


  virtual ~NetPlayQueryService_filter_presult() throw();
  std::vector<int64_t> * success;
  QueryException e;

  _NetPlayQueryService_filter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NetPlayQueryService_get_args__isset {
  _NetPlayQueryService_get_args__isset() : record_id(false) {}
  bool record_id :1;
} _NetPlayQueryService_get_args__isset;

class NetPlayQueryService_get_args {
 public:

  NetPlayQueryService_get_args(const NetPlayQueryService_get_args&);
  NetPlayQueryService_get_args& operator=(const NetPlayQueryService_get_args&);
  NetPlayQueryService_get_args() : record_id(0) {
  }

  virtual ~NetPlayQueryService_get_args() throw();
  int64_t record_id;

  _NetPlayQueryService_get_args__isset __isset;

  void __set_record_id(const int64_t val);

  bool operator == (const NetPlayQueryService_get_args & rhs) const
  {
    if (!(record_id == rhs.record_id))
      return false;
    return true;
  }
  bool operator != (const NetPlayQueryService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetPlayQueryService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NetPlayQueryService_get_pargs {
 public:


  virtual ~NetPlayQueryService_get_pargs() throw();
  const int64_t* record_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetPlayQueryService_get_result__isset {
  _NetPlayQueryService_get_result__isset() : success(false) {}
  bool success :1;
} _NetPlayQueryService_get_result__isset;

class NetPlayQueryService_get_result {
 public:

  NetPlayQueryService_get_result(const NetPlayQueryService_get_result&);
  NetPlayQueryService_get_result& operator=(const NetPlayQueryService_get_result&);
  NetPlayQueryService_get_result() : success() {
  }

  virtual ~NetPlayQueryService_get_result() throw();
  std::string success;

  _NetPlayQueryService_get_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const NetPlayQueryService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NetPlayQueryService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetPlayQueryService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetPlayQueryService_get_presult__isset {
  _NetPlayQueryService_get_presult__isset() : success(false) {}
  bool success :1;
} _NetPlayQueryService_get_presult__isset;

class NetPlayQueryService_get_presult {
 public:


  virtual ~NetPlayQueryService_get_presult() throw();
  std::string* success;

  _NetPlayQueryService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NetPlayQueryService_extract_args__isset {
  _NetPlayQueryService_extract_args__isset() : record_id(false), off(false), len(false) {}
  bool record_id :1;
  bool off :1;
  bool len :1;
} _NetPlayQueryService_extract_args__isset;

class NetPlayQueryService_extract_args {
 public:

  NetPlayQueryService_extract_args(const NetPlayQueryService_extract_args&);
  NetPlayQueryService_extract_args& operator=(const NetPlayQueryService_extract_args&);
  NetPlayQueryService_extract_args() : record_id(0), off(0), len(0) {
  }

  virtual ~NetPlayQueryService_extract_args() throw();
  int64_t record_id;
  int16_t off;
  int16_t len;

  _NetPlayQueryService_extract_args__isset __isset;

  void __set_record_id(const int64_t val);

  void __set_off(const int16_t val);

  void __set_len(const int16_t val);

  bool operator == (const NetPlayQueryService_extract_args & rhs) const
  {
    if (!(record_id == rhs.record_id))
      return false;
    if (!(off == rhs.off))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const NetPlayQueryService_extract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetPlayQueryService_extract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NetPlayQueryService_extract_pargs {
 public:


  virtual ~NetPlayQueryService_extract_pargs() throw();
  const int64_t* record_id;
  const int16_t* off;
  const int16_t* len;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetPlayQueryService_extract_result__isset {
  _NetPlayQueryService_extract_result__isset() : success(false) {}
  bool success :1;
} _NetPlayQueryService_extract_result__isset;

class NetPlayQueryService_extract_result {
 public:

  NetPlayQueryService_extract_result(const NetPlayQueryService_extract_result&);
  NetPlayQueryService_extract_result& operator=(const NetPlayQueryService_extract_result&);
  NetPlayQueryService_extract_result() : success() {
  }

  virtual ~NetPlayQueryService_extract_result() throw();
  std::string success;

  _NetPlayQueryService_extract_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const NetPlayQueryService_extract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NetPlayQueryService_extract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetPlayQueryService_extract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetPlayQueryService_extract_presult__isset {
  _NetPlayQueryService_extract_presult__isset() : success(false) {}
  bool success :1;
} _NetPlayQueryService_extract_presult__isset;

class NetPlayQueryService_extract_presult {
 public:


  virtual ~NetPlayQueryService_extract_presult() throw();
  std::string* success;

  _NetPlayQueryService_extract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NetPlayQueryService_numRecords_args {
 public:

  NetPlayQueryService_numRecords_args(const NetPlayQueryService_numRecords_args&);
  NetPlayQueryService_numRecords_args& operator=(const NetPlayQueryService_numRecords_args&);
  NetPlayQueryService_numRecords_args() {
  }

  virtual ~NetPlayQueryService_numRecords_args() throw();

  bool operator == (const NetPlayQueryService_numRecords_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NetPlayQueryService_numRecords_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetPlayQueryService_numRecords_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NetPlayQueryService_numRecords_pargs {
 public:


  virtual ~NetPlayQueryService_numRecords_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetPlayQueryService_numRecords_result__isset {
  _NetPlayQueryService_numRecords_result__isset() : success(false) {}
  bool success :1;
} _NetPlayQueryService_numRecords_result__isset;

class NetPlayQueryService_numRecords_result {
 public:

  NetPlayQueryService_numRecords_result(const NetPlayQueryService_numRecords_result&);
  NetPlayQueryService_numRecords_result& operator=(const NetPlayQueryService_numRecords_result&);
  NetPlayQueryService_numRecords_result() : success(0) {
  }

  virtual ~NetPlayQueryService_numRecords_result() throw();
  int64_t success;

  _NetPlayQueryService_numRecords_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const NetPlayQueryService_numRecords_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NetPlayQueryService_numRecords_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetPlayQueryService_numRecords_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetPlayQueryService_numRecords_presult__isset {
  _NetPlayQueryService_numRecords_presult__isset() : success(false) {}
  bool success :1;
} _NetPlayQueryService_numRecords_presult__isset;

class NetPlayQueryService_numRecords_presult {
 public:


  virtual ~NetPlayQueryService_numRecords_presult() throw();
  int64_t* success;

  _NetPlayQueryService_numRecords_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NetPlayQueryService_storageFootprint_args {
 public:

  NetPlayQueryService_storageFootprint_args(const NetPlayQueryService_storageFootprint_args&);
  NetPlayQueryService_storageFootprint_args& operator=(const NetPlayQueryService_storageFootprint_args&);
  NetPlayQueryService_storageFootprint_args() {
  }

  virtual ~NetPlayQueryService_storageFootprint_args() throw();

  bool operator == (const NetPlayQueryService_storageFootprint_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NetPlayQueryService_storageFootprint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetPlayQueryService_storageFootprint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NetPlayQueryService_storageFootprint_pargs {
 public:


  virtual ~NetPlayQueryService_storageFootprint_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetPlayQueryService_storageFootprint_result__isset {
  _NetPlayQueryService_storageFootprint_result__isset() : success(false) {}
  bool success :1;
} _NetPlayQueryService_storageFootprint_result__isset;

class NetPlayQueryService_storageFootprint_result {
 public:

  NetPlayQueryService_storageFootprint_result(const NetPlayQueryService_storageFootprint_result&);
  NetPlayQueryService_storageFootprint_result& operator=(const NetPlayQueryService_storageFootprint_result&);
  NetPlayQueryService_storageFootprint_result() {
  }

  virtual ~NetPlayQueryService_storageFootprint_result() throw();
  Storage success;

  _NetPlayQueryService_storageFootprint_result__isset __isset;

  void __set_success(const Storage& val);

  bool operator == (const NetPlayQueryService_storageFootprint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NetPlayQueryService_storageFootprint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NetPlayQueryService_storageFootprint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NetPlayQueryService_storageFootprint_presult__isset {
  _NetPlayQueryService_storageFootprint_presult__isset() : success(false) {}
  bool success :1;
} _NetPlayQueryService_storageFootprint_presult__isset;

class NetPlayQueryService_storageFootprint_presult {
 public:


  virtual ~NetPlayQueryService_storageFootprint_presult() throw();
  Storage* success;

  _NetPlayQueryService_storageFootprint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NetPlayQueryServiceClient : virtual public NetPlayQueryServiceIf {
 public:
  NetPlayQueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NetPlayQueryServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void filter(std::vector<int64_t> & _return, const std::string& query);
  void send_filter(const std::string& query);
  void recv_filter(std::vector<int64_t> & _return);
  void get(std::string& _return, const int64_t record_id);
  void send_get(const int64_t record_id);
  void recv_get(std::string& _return);
  void extract(std::string& _return, const int64_t record_id, const int16_t off, const int16_t len);
  void send_extract(const int64_t record_id, const int16_t off, const int16_t len);
  void recv_extract(std::string& _return);
  int64_t numRecords();
  void send_numRecords();
  int64_t recv_numRecords();
  void storageFootprint(Storage& _return);
  void send_storageFootprint();
  void recv_storageFootprint(Storage& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NetPlayQueryServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<NetPlayQueryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (NetPlayQueryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_filter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_extract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_numRecords(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storageFootprint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NetPlayQueryServiceProcessor(boost::shared_ptr<NetPlayQueryServiceIf> iface) :
    iface_(iface) {
    processMap_["filter"] = &NetPlayQueryServiceProcessor::process_filter;
    processMap_["get"] = &NetPlayQueryServiceProcessor::process_get;
    processMap_["extract"] = &NetPlayQueryServiceProcessor::process_extract;
    processMap_["numRecords"] = &NetPlayQueryServiceProcessor::process_numRecords;
    processMap_["storageFootprint"] = &NetPlayQueryServiceProcessor::process_storageFootprint;
  }

  virtual ~NetPlayQueryServiceProcessor() {}
};

class NetPlayQueryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NetPlayQueryServiceProcessorFactory(const ::boost::shared_ptr< NetPlayQueryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NetPlayQueryServiceIfFactory > handlerFactory_;
};

class NetPlayQueryServiceMultiface : virtual public NetPlayQueryServiceIf {
 public:
  NetPlayQueryServiceMultiface(std::vector<boost::shared_ptr<NetPlayQueryServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NetPlayQueryServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NetPlayQueryServiceIf> > ifaces_;
  NetPlayQueryServiceMultiface() {}
  void add(boost::shared_ptr<NetPlayQueryServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void filter(std::vector<int64_t> & _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->filter(_return, query);
    }
    ifaces_[i]->filter(_return, query);
    return;
  }

  void get(std::string& _return, const int64_t record_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, record_id);
    }
    ifaces_[i]->get(_return, record_id);
    return;
  }

  void extract(std::string& _return, const int64_t record_id, const int16_t off, const int16_t len) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->extract(_return, record_id, off, len);
    }
    ifaces_[i]->extract(_return, record_id, off, len);
    return;
  }

  int64_t numRecords() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->numRecords();
    }
    return ifaces_[i]->numRecords();
  }

  void storageFootprint(Storage& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storageFootprint(_return);
    }
    ifaces_[i]->storageFootprint(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class NetPlayQueryServiceConcurrentClient : virtual public NetPlayQueryServiceIf {
 public:
  NetPlayQueryServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NetPlayQueryServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void filter(std::vector<int64_t> & _return, const std::string& query);
  int32_t send_filter(const std::string& query);
  void recv_filter(std::vector<int64_t> & _return, const int32_t seqid);
  void get(std::string& _return, const int64_t record_id);
  int32_t send_get(const int64_t record_id);
  void recv_get(std::string& _return, const int32_t seqid);
  void extract(std::string& _return, const int64_t record_id, const int16_t off, const int16_t len);
  int32_t send_extract(const int64_t record_id, const int16_t off, const int16_t len);
  void recv_extract(std::string& _return, const int32_t seqid);
  int64_t numRecords();
  int32_t send_numRecords();
  int64_t recv_numRecords(const int32_t seqid);
  void storageFootprint(Storage& _return);
  int32_t send_storageFootprint();
  void recv_storageFootprint(Storage& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
